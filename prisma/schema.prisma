// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model products {
  id Int @id @default(autoincrement())
  name String 
  description String?
  price Float
  imagesUrl String[]
  boughtByUser boughtByUser[]
}

model clients {
  id        Int @id @default(autoincrement())
  name      String 
  email     String? @unique
  password  String
  boughtByUser boughtByUser[]
  tokens tokens[]
}

//Tabela de junção muitos-muitos
model boughtByUser{
  id Int @id @default(autoincrement())
  client clients @relation(fields: [clientId], references: [id])
  product products @relation(fields: [productId], references: [id])

  clientId Int
  productId Int
}

model tokens {
  id Int @id @default(autoincrement())
  token String
  client clients @relation(fields: [clientId], references: [id])
  clientId Int
}

/*

➡️ Quando você roda:

npx prisma generate


O Prisma cria um client com base nesse schema.
No exemplo acima, ele gera prisma.pages, que se conecta exatamente à tabela pages do banco.

🔎 2. E se a tabela não existir ainda?

Aí você precisa criar a tabela no banco. O Prisma não cria sozinho, mas oferece ferramentas para isso:

Você define o model no schema.prisma.

Depois roda:

npx prisma migrate dev --name init

🔎 4. Resumindo

O Prisma mapeia models do schema.prisma para tabelas do banco.

Se a tabela ainda não existe → você cria com prisma migrate dev.

Se o banco já existe → você pode usar prisma db pull para sincronizar seu schema com o banco existente.

*/